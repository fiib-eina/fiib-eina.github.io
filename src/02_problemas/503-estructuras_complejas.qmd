---
title: Problemas 10
subtitle: Estructuras de datos complejas
format: html
---

## Hundir la flota

El juego **Hundir la flota** consiste en adivinar la posición de los barcos en un tablero. Cada barco ocupa una serie de celdas contiguas en horizontal o vertical. El objetivo es hundir todos los barcos.

### `nuevo_tablero`

Escribe una función `nuevo_tablero` que reciba un número entero `n` y devuelva un tablero (matriz de booleanos) de `n` filas y `n` columnas con todas las celdas a `False`.

```python
def nuevo_tablero(n):
    # ???
    return tablero
```

<details>
<summary>Solución</summary>

```python
def nuevo_tablero(n):
    tablero = [None] * n
    for i in range(n):
        tablero[i] = [False] * n
    return tablero
```

</details>

### `inicializa_tablero`

Escribe una función `inicializa_tablero` que genere un tablero de `n` filas y `n` columnas, haga `num_barcos` colocaciones [aleatorias](../01_teoria/03_composicion/306_composicion_iterativa_avanzada.qmd#n%C3%BAmeros-pseudo-aleatorios-en-python) de barcos y devuelva el tablero resultando.


- Los barcos serán de tamaño `1` (un barco ocupa una celda).
- El número de colocaciones (`num_barcos`) será fija.
    - Si una colocación elige una celda ocupada, **no** se busca otra celda.
- No hay reglas de adyacencia.


```python
def inicializa_tablero(n, num_barcos):
    # ???
    return tablero
```

<details>
<summary>Solución</summary>

```python
import random

def inicializa_tablero(n, num_barcos):
    tablero = nuevo_tablero(n)
    for i in range(num_barcos):
        fila = random.randint(0, n - 1)
        columna = random.randint(0, n - 1)
        tablero[fila][columna] = True
    return tablero
```
    
</details>


### `comprobar_posicion`

Escribe una función `comprobar_posicion` que reciba un tablero y una posición `x, y` devuelva `True` si la posición está ocupada por un barco o `False` en caso contrario.

```python
def comprobar_posicion(tablero, x, y):
    # ???
```

<details>
<summary>Solución</summary>

```python
def comprobar_posicion(tablero, x, y):
    return tablero[x][y]
```

</details>

## RPG

Vamos a modelar el sistema de enemigos de un juego de rol.

### `Enemigo`

Escribe una clase `Enemigo` que tenga los siguientes atributos (los valores numericos son enteros):

- `nombre`: nombre del enemigo.
- `nivel`: nivel del enemigo.
- `salud`: puntos de vida del enemigo.
- `ataque`: puntos de ataque del enemigo.
- `escudo`: puntos de defensa del enemigo.
- `inhabilitado`: si el enemigo está inhabilitado o no.
- `recompensa`: cantidad de oro que suelta al morir.

<details>
<summary>Solución</summary>

```python
@dataclasses.dataclass
class Enemigo:
    nombre: str
    nivel: int
    salud: int
    ataque: int
    escudo: int
    inhabilitado: bool
    recompensa: int
```

</details>

### `calcular_dano_oleada`

Los enemigos en este juego van por oleadas.
Cada oleada tiene un número de enemigos y cada enemigo tiene sus propios atributos.

Escribe una función `calcular_dano_oleada` que reciba una lista de enemigos y devuelva el daño total que hacen todos los enemigos de la oleada en ese turno.

```python
def calcular_dano_oleada(oleada):
    # ???
    return dano_total
```

<details>
<summary>Solución</summary>

```python
def calcular_dano_oleada(oleada):
    dano_total = 0
    for i in range(len(oleada)):
        dano_total += oleada[i].ataque
    return dano_total
```

</details>

### `calcular_dano_oleada` 2

Actualiza la función `calcular_dano_oleada` para que tenga en cuenta que los enemigos inhabilitados no pueden atacar ese turno.

```python
def calcular_dano_oleada(oleada):
    # ???
    return dano_total
```

<details>
<summary>Solución</summary>

```python
def calcular_dano_oleada(oleada):
    dano_total = 0
    for i in range(len(oleada)):
        if not oleada[i].inhabilitado:
            dano_total += oleada[i].ataque
    return dano_total
```

</details>


## Murcielago

La palabra `murciélago` es una palabra que contiene todas las vocales (`a`, `e`, `i`, `o`, `u`). Escribe una función `contiene_vocales` que reciba un string `palabra` y devuelva un valor booleano que indique si la palabra contiene todas las vocales. _No consideres las tildes_.

```python
def contiene_vocales(palabra):
    # ???

# TEST
print(contiene_vocales("murcielago"))  # True
print(contiene_vocales("espantapajaros"))  # False
```

<details>
<summary>Pista 1</summary>

- Recorre la palabra letra a letra y "marca" qué vocales has encontrado.
- Al final, comprueba si has encontrado todas las vocales.

</details>

<details>
<summary>Solución</summary>

```python
def contiene_vocales(palabra):
    tiene_a = False
    tiene_e = False
    tiene_i = False
    tiene_o = False
    tiene_u = False

    for i in range(len(palabra)):
        letra = palabra[i]
        if letra == "a":
            tiene_a = True
        elif letra == "e":
            tiene_e = True
        elif letra == "i":
            tiene_i = True
        elif letra == "o":
            tiene_o = True
        elif letra == "u":
            tiene_u = True

    return tiene_a and tiene_e and tiene_i and tiene_o and tiene_u
```

</details>

<details>
<summary>Solución alternativa</summary>

```python
def contiene_vocales(palabra):
    letras = ["a", "e", "i", "o", "u"]
    tiene = [False, False, False, False, False]

    for i in range(len(palabra)):
        letra = palabra[i]
        for j in range(len(letras)):
            if letra == letras[j]:
                tiene[j] = True

    tiene_todas = True
    for i in range(len(tiene)):
        if not tiene[i]:
            tiene_todas = False

    return tiene_todas
```

</details> 
