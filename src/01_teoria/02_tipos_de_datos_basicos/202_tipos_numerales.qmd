---
title: Teoría 202
subtitle: Tipos Numerales
format: revealjs
---

## Tipos de datos en Python {.center}

---

### Tipos de datos básicos en Python

- Todos los lenguajes cuentan con una serie de tipos básicos.
- Los tipos básicos de Python que estudiaremos son:
    - **Enteros**: para representar números enteros
    - **Reales**: para representar números reales
    - **Booleanos**: para representar valores de cierto o falso
    - **Texto**: para representar cadenas de caracteres

---

### Para cada tipo de dato, nos interesa saber...

- Su **palabra reservada**
    - `int`, `float`, etc.
- Sus **literales** 
    - _¿un número real se escribe 1,7 o 1.7?_
- Su **dominio** (rango de valores)
    - _¿puedo representar un D.N.I. con un `int`?_
- Sus **operaciones** disponibles 
    - _¿puedo sumar números enteros?_

---

#### Dominio de un tipo de dato

- El **dominio** de un tipo de dato es el conjunto de valores que puede representar
- A diferencia de las matemáticas, en programación:
    - **Todos los tipos de datos tienen un dominio finito**
- El _tamaño_ de un tipo de dato determina su dominio
    - Un tipo de dato que requiere **más bits** podrá representar **más valores**

---

### Tipos implícitos

- Recordad que Python es un lenguaje de **tipado dinámico**
    - No es necesario declarar el tipo de una variable
    - La palabra reservada de cada tipo será útil para operaciones específicas

```python
edad = 21  # Python infiere que edad es un entero (int)
```

::: {.callout-tip}
En VSCode puedes colocar el puntero de tu ratón (_hover_) sobre una variable para recibir una pista sobre su tipo.
:::

---

## Enteros {.center}

---

### Números enteros en Python

- **Palabra reservada**: `int`
- **Literales**: `1`, `-3`, `0`, `1`, `3_000_000`, `2E3`
- **Dominio**: _depende de la arquitectura de la máquina_
- **Operadores**:
    - **Aritméticos**: `+`, `-`, `*`, `/`, `//`, `%`, `**`
    - **Comparación**: `>`, `>=`, `<`, `<=`, `==`, `!=`

---

### Enteros: Representación literal

- Secuencia de uno o más dígitos (caracteres 0, 1, ..., 9)
- Pueden ir precedidos por un signo (`+` o `-`)
- Barras bajas (`_`) para separar dígitos
- Python admite notación científica
- No se permiten ceros a la izquierda

```python 
b = 3    
c = -523
c = +444
d = 2
e = 4_0_0
f = 2E3
```

---

### Enteros: Dominio

- En matemáticas:
    - Dominio $[-\infty,+\infty]$ 
- En informática:
    - Entre un **mínimo** y un **máximo** 
    - Dependen de la arquitectura de la máquina

---

#### Enteros: Dominio en otros lenguajes

|   **Palabra clave**     |  **Tipo de dato**  |  **Tamaño (en bits)**  |
| ----------------------- | ------------------ | ---------------------- |
|        `short`          |       entero       |         16             |
|         `int`           |       entero       |         32             |
|         `long`          |       entero       |         32             |
|      `long long`        |       entero       |         64             |


---

#### Enteros: Dominio en python

- En Python, **todos los tipos de enteros están unificados** en `int`

---

### Enteros: Operadores

- Operadores **aritméticos:**
    - Suma: `+`
    - Resta: `-`
    - Multiplicación: `*`
    - División: `/`
    - División entera: `//`
    - Módulo (resto de la división): `%` **¡Ojo!**
    - Potencia: `**`

- Operadores **de comparación**:
    - Mayor estricto: `>`
    - Mayor o igual: `>=`
    - Menor estricto: `<`
    - Menor o igual: `<=`
    - Igualdad: `==` **¡Atención!**
    - Desigualdad: `!=`

---

# Reales {.center}

---

### Números reales en Python

- **Palabra reservada**: `float`
- **Literales**: `1`, `1.0`, `0.3`, `.2`, `1e-3`
- **Dominio**: _depende de la arquitectura de la máquina_
- **Operadores**:
    - **Aritméticos**: `+`, `-`, `*`, `/`, `**`
    - **Comparación**: `>`, `>=`, `<`, `<=`, `==`, `!=`

---

### Reales: Dominio

- En matemáticas:
    - Dominio $[-\infty,+\infty]$ 
- En informática:
    - Entre un **mínimo** y un **máximo** 
    - Dependen de la arquitectura de la máquina

---

#### Reales: Dominio en otros lenguajes

|   **Palabra clave**     |  **Tipo de dato**  |  **Tamaño (en bits)**  |
| ----------------------- | ------------------ | ---------------------- |
|        `float`          |        real        |           32           |
|        `double`         |        real        |           64           |
|     `long double`       |        real        |         96             |

---

#### Enteros: Dominio en python

- En Python, **todos los tipos de reales están unificados** en `float`

---

### Reales: Operadores

- Operadores **aritméticos:**
    - Suma: `+`
    - Resta: `-`
    - Multiplicación: `*`
    - División: `/`
    - Potencia: `**`
- Operadores **de comparación**:\
    - Mayor estricto: `>`
    - Mayor o igual: `>=`
    - Menor estricto: `<`
    - Menor o igual: `<=`
    - Igualdad: `==`
    - Desigualdad: `!=`

---

## Funciones numéricas {.center}


---

### Funciones: Breve introducción

- Una **función** es un bloque de código que realiza una tarea específica
- **De momento**, no vamos a preocuparnos por **cómo se definen**,
    - sino por **cómo se utilizan**
- Para ejecutar una función, se ha de **invocar** o **llamar** a la función
    - Se hace escribiendo el nombre de la función seguido de paréntesis `()`
    - Si la función requiere **argumentos**, se escriben dentro de los paréntesis

```python
print("Hola, mundo!")  # La función se llama print, y recibe un argumento
```

---

### Bibliotecas (libraries) de Python

- Uno de los principios fundamentales del desarrollo software es la **reutilización**
- Funcionalidades comunes **han sido ya implementadas por otros**
- Algunas de estas funcionalidades existen disponibles en el propio lenguaje
    - `print()` o `input()`
- Algunas de estas funcionalidades han sido **integradas por defecto** en el intérprete de Python.
    - El conjunto de funcionalidades incorporadas forma parte de la _Standard Library_ (`stdlib`).
    - Existen **muchas** otras funciones, algunas de las cuales usaremos con frecuencia.
- Para utilizar una función de alguna de estas bibliotecas, **debemos importarla**.

```python
import math  # importa la biblioteca math

math.abs(-3)  # invoca la función abs de la biblioteca math
```

---

### Funciones numéricas nativas y de la `stdlib`

| Biblioteca | Invocación | Descripción |
| -- | -- | -- |
| nativa | `int(x)` | **Convierte** la entrada a entero |
| nativa | `float(x)` | **Convierte** la entrada a real |
| nativa | `abs(x)` | Valor absoluto |
| nativa | `round(x)` | Redondeo |
| math   | `math.sqrt(x)` | Raíz cuadrada |
| math   | `math.sin(x)` | Seno |
| math   | `math.cos(x)` | Coseno |
| math   | `math.atan(x)` | Arcotangente |
| math   | `math.log(x)` | Logaritmo |
| math   | `math.exp(x)` | Exponencial |
| math   | `math.floor(x)` | Entero por defecto |
| math   | `math.ceil(x)` | Entero por exceso |

---

## Expresiones avanzadas con números {.center}

---

### Tipos de los operandos y resultados

- Cada operación está compuesta por una serie de **operandos** y genera un **resultado** 
    - _Ej_: `3 + 4` es una expresión que toma dos `int` y devuelve un `int`
- La mayoría de operadores aritméticos permiten combinar operandos de diferentes tipos
    - _Ej_: `3 + 4.0` es una expresión que toma un `int` y un `float` y devuelve un `float`
- Algunas operaciones toman operandos de un tipo y devuelven un resultado de otro tipo
    - _Ej_: `3 / 4` es una expresión que toma dos `int` y devuelve un `float`
- Algunas funciones numéricas requieren operandos de un tipo específico (un int)
    - _Ej_: `math.factorial(3)` requiere un `int` y devuelve un `int`
- Recuerda que:
    - `float()` convierte cualquier `int` en un `float` equivalente
    - `int()` **elimina los decimales** de un `float` y lo convierte en un `int`

---

## Ejercicios {.center}

---

¿De qué **tipo** es cada una de las siguientes variables?

```python
a = 3 + 2.1
b = 3 / 2
c = 3 // 2
d = 3 ** 2
e = int(2.1)
f = round(2.1)
g = math.sqrt(4)
h = int(a) * c * d
```

---

