---
title: Teoría 306
subtitle: Composición Iterativa V
format: revealjs
draft: true
---

## Composición Iterativa V {.center}

<!-- TODO: Pillar ideas de los ejercicios de MEC -->

---

### Cálculo numérico II

- Uno de los primeros usos de la computación fue el **cálculo numérico**.
    - El cálculo numérico consiste en **aproximar** soluciones a problemas matemáticos.
- Los bucles `for` son una herramienta muy útil para realizar cálculos numéricos.

---

#### Ejercicio: Calcular una integral de forma numérica

Escribe un programa Python que calcule la integral de la función $f(x) = x^3$
en el intervalo `[0, 1]` mediante la regla del punto medio.

Sabemos que analíticamente:

$$
\int_{0}^{1} x^3 \, dx = \left.\frac{x^4}{4}\right|_0^1 = \frac{1^4}{4} - \frac{0^4}{4} = \frac{1}{4}
$$

---

**Solución:**

```python
a = 0
b = 1
n = 1000
step = (b - a) / n

integral = 0

# for x in range(a, b, step):
x = a
while x < b:
    y = x ** 3  # f(x) = x^3
    area = step * y
    integral += area
    x += step

print(integral)
```

::: {.callout-tip}
¿Por qué no podemos usar `range(a, b, step)`?

- La función `range` solo acepta números enteros.
- ¿Se te ocurre alguna forma de solucionarlo?
:::

---

#### Ejercicio: Aproximación de $\pi$

Escribe un programa Python que calcule una aproximación de $\pi$ mediante la fórmula de Leibniz:

$$
\pi = 4 \left(1 - \frac{1}{3} + \frac{1}{5} - \frac{1}{7} + \ldots\right)x
$$

---

**Solución:**

```python
n = 1000
pi = 0

for i in range(0, n):
    pi += 4 * ((-1) ** i) / (2 * i + 1)
```

