---
title: Teoría 305
subtitle: Composición Iterativa IV
format: revealjs
---

## Uso avanzado de los bucles `for` {.center}

<!-- TODO: Pillar ideas de los ejercicios de MEC -->

---

- En esta sesión vamos a profundizar en el uso de bucles `for` aplicados a múltiples dominios.
- Esta no es una cobertura exhaustiva de todos los escenarios donde son aplicables.

---

### Representaciones gráficas

- Los patrones iterativos son muy útiles para generar **representaciones gráficas**.
    - La repetición de un elemento en un patrón regular.
- Por ejemplo, dibujar una cuadrícula de 4x10 asteriscos (`*`).
    1. Dibujar 10 asteriscos en una fila.
    2. Repetir 4 veces.
- En esta sección, además, veremos **formas avanzadas** de pintar por pantalla.

---

#### Ejercicio: Dibujar una cuadrícula de 4x10 asteriscos

Escribe un programa Python que dibuje una cuadrícula de 4x10 asteriscos.

| **********
| **********
| **********
| **********

::: {.callout-tip}
Para resolverlo tendrás que utilizar `print("*", end="")` para evitar saltos de línea.
:::

---

**Solución:**

```python
for i in range(4):
    for j in range(10):
        print("*", end="")
    print()
```

::: {.callout-tip}
Observa el uso de `print(t, end="")` para evitar saltos de línea.

- `end=""` indica que no se añada un salto de línea al final de la impresión.
- `print()` es equivalente a `print("")`.
:::

---

#### Ejercicio: Dibujar las tablas de multiplicar

Escribe un programa Python que imprima los números del 1 al 10 multiplicados entre sí.

```
   1   2   3   4   5   6   7   8   9  10
   2   4   6   8  10  12  14  16  18  20
   3   6   9  12  15  18  21  24  27  30
   4   8  12  16  20  24  28  32  36  40
   5  10  15  20  25  30  35  40  45  50
   6  12  18  24  30  36  42  48  54  60
   7  14  21  28  35  42  49  56  63  70
   8  16  24  32  40  48  56  64  72  80
   9  18  27  36  45  54  63  72  81  90
  10  20  30  40  50  60  70  80  90 100
```

::: {.callout-tip}
Para alinear los números, puedes usar `f"{producto:4}"`.
:::

---

**Solución:**

```python
for i in range(1, 11):
    for j in range(1, 11):
        producto = i * j
        print(f"{producto:4}", end="")
    print()
```

::: {.callout-tip}
Observa el uso de `f"{producto:4}"` para alinear los números.

- En las f-strings, `:4` indica que el número se imprima en un espacio de 4 caracteres.
- Si el número tiene menos de 4 dígitos, se rellena con espacios.
- Si el número tiene más de 4 dígitos, se imprime sin cambios.
- Esto permite alinear los números en columnas.
:::

---

#### Ejercicio: Plantilla de un calendario

Escribe un programa Python que imprima una plantilla de un calendario de un mes.

```
  L   M   X   J   V   S   D
  1   2   3   4   5   6   7 
  8   9  10  11  12  13  14 
 15  16  17  18  19  20  21 
 22  23  24  25  26  27  28 
 29  30  31 
```

---

**Solución:**

```python
print("  L   M   X   J   V   S   D")
for i in range(1, 32):
    print(f"{i:3}", end=" ")
    if i % 7 == 0:
        print()
```

---

### Combinatoria

- La **combinatoria** es una rama de las matemáticas que estudia las posibles combinaciones de elementos.
- En Python, podemos usar bucles `for` para generar todas las combinaciones posibles.
- Por ejemplo, generar todas las combinaciones de dos dados.

---

#### Ejemplo: Combinaciones de dos dados

Programa Python que genera todas las combinaciones posibles de dos dados.

```python
for i in range(1, 7):
    for j in range(1, 7):
        print(f"{i} {j}")
```

---

#### Ejercicio: Combinaciones de dados que suman 7

Escribe un programa Python que genere todas las combinaciones de dos dados cuya suma sea 7.

| 1 6
| 2 5
| 3 4
| 4 3
| 5 2
| 6 1

---

**Solución:**

```python
for i in range(1, 7):
    for j in range(1, 7):
        if i + j == 7:
            print(f"{i} {j}")
```

---

## Otros usos avanzados de los bucles {.center}

---

### Búsqueda II

- En la sesión de [Composición Iterativa II](./303_composicion_iterativa_while_II.qmd), vimos ejemplos sencillos de búsqueda (Adivina un número).
- Existen ejemplos más complejos de búsqueda que requieren de criterios más sofisticados.

---

#### Ejercicio: Comprueba si un número es primo

Escribe un programa Python que compruebe si un número es primo.

- Formulado de esta manera, no parece un problema de búsqueda.
Sin embargo, podemos decir que un número NO es primo si le ENCONTRAMOS un divisor.

| Introduce un número entero:
| **7**
| 7 es primo

| Introduce un número entero:
| **8**
| 8 no es primo

---

**Solución:**

```python
print("Introduce un número entero:")
candidato = int(input())

es_primo = True
i = 2
while es_primo and i < candidato:
    if candidato % i == 0:
        es_primo = False
    i += 1

if es_primo:
    print(f"{candidato} es primo")
else:
    print(f"{candidato} no es primo")
```

::: {.callout-warning}
No utilizamos un bucle `for` porque no sabemos cuántas iteraciones necesitaremos.
:::

---

#### Ejercicio: Encontrar el primer número primo mayor que N

Escribe un programa Python que encuentre el primer número primo mayor que un número `N` dado.

| Introduce un número entero:
| **10**
| El primer número primo mayor que 10 es 11

| Introduce un número entero:
| **20**
| El primer número primo mayor que 20 es 23

---

**Solución:** (sin usar for ni break)

```python
print("Introduce un número entero:")
n = int(input())

candidato = n + 1
encontrado = False
while not encontrado:
    # Del ejercicio anterior
    es_primo = True
    i = 2
    while es_primo and i < candidato:
        if candidato % i == 0:
            es_primo = False
        i += 1
    # Hasta aquí

    if es_primo:
        encontrado = True
    else:
        candidato += 1

print(f"El primer número primo mayor que {n} es {candidato}")
```

---

### Lo que está por venir

- Puede parecer que los bucles `for` son una herramienta simple y limitada.
- El verdadero potencial de los bucles `for` se desbloquea cuando se combinan con **funciones** y **estructuras de datos**.
- A lo largo del curso, volveremos a **retomar y profundizar** en los bucles `for` y `while`.
