---
title: Teoría 801
subtitle: Repaso
format: revealjs
draft: true
---

## Ejercicio: Sudoku

Tienes un fichero `sudoku.txt` que contiene un Sudoku 9×9, donde los ceros representan casillas vacías.
Cada línea del fichero representa una fila, con los 9 números separados por espacios.


**sudoku.txt**

| 5 3 0 0 7 0 0 0 0
| 6 0 0 1 9 5 0 0 0
| 0 9 8 0 0 0 0 6 0
| 8 0 0 0 6 0 0 0 3
| 4 0 0 8 0 3 0 0 1
| 7 0 0 0 2 0 0 0 6
| 0 6 0 0 0 0 2 8 0
| 0 0 0 4 1 9 0 0 5
| 0 0 0 0 8 0 0 7 9

#### `leer_tablero(nombre_fichero)`

Desarrolla una función llamana `leer_tablero(nombre_fichero)` que reciba el nombre de un fichero y devuelva una lista de listas con los números del Sudoku.

---


```python
def leer_tablero(nombre_fichero):
    tablero = []
    with open(nombre_fichero, "r") as f:
        lineas = f.readlines()
    for i in range(len(lineas)):
        numeros = lineas[i].strip().split()
        fila = []
        for j in range(len(numeros)):
            fila.append(int(numeros[j]))
        tablero.append(fila)
    return tablero
```


---

**Solución final**

```python
from dataclasses import dataclass

@dataclass
class Placement:
    fila: int
    columna: int
    valor: int

def leer_tablero(nombre_fichero: str) -> list[list[int]]:
    tablero = []
    with open(nombre_fichero, "r") as f:
        lineas = f.readlines()
    for i in range(len(lineas)):
        numeros = lineas[i].strip().split()
        fila = []
        for j in range(len(numeros)):
            fila.append(int(numeros[j]))
        tablero.append(fila)
    return tablero

def escribir_tablero(nombre_fichero: str, tablero: list[list[int]]) -> None:
    with open(nombre_fichero, "w") as f:
        for i in range(9):
            for j in range(9):
                f.write(str(tablero[i][j]))
                if j < 8:
                    f.write(" ")
            f.write("\n")

def es_valido(tablero: list[list[int]], p: Placement) -> bool:
    for j in range(9):
        if tablero[p.fila][j] == p.valor:
            return False
    for i in range(9):
        if tablero[i][p.columna] == p.valor:
            return False
    return True

def colocar(tablero: list[list[int]], p: Placement) -> None:
    tablero[p.fila][p.columna] = p.valor

def pedir_placement() -> Placement:
    fila = int(input("Introduce la fila (0-8): "))
    columna = int(input("Introduce la columna (0-8): "))
    valor = int(input("Introduce el valor (1-9): "))
    return Placement(fila, columna, valor)

tablero = leer_tablero("sudoku.txt")
p = pedir_placement()
if es_valido(tablero, p):
    colocar(tablero, p)
    escribir_tablero("sudoku.txt", tablero)
    print("Valor colocado correctamente.")
else:
    print("No se puede colocar ese valor aquí.")

```


---

## Ejercicio: Ruta senderismo

Escribe un programa Python que solicite al usuario una serie de coordenadas (`lat`, `lon`) que representan una ruta de senderismo. El programa debe calcular la distancia total recorrida por el senderista.

- Si una coordenada no es válida, el programa debe mostrar un mensaje de error y solicitar una nueva coordenada.
- Unas coordenadas válidas son:
    - `lat`: un número real entre `-90` y `90`.
    - `lon`: un número real entre `-180` y `180`.
- La secuencia termina cuando ambas coordenadas son (0, 0).
- La distancia se calcula como la suma de las distancias entre cada par de puntos consecutivos.
- Para rutas cortas puedes calcular la distancia en línea recta sobre las coordenadas proyectadas.

---

#### Planificación

Podemos dividir el problema en las siguientes partes (que no fases):

- Obtención de coordenadas (correctas).
- Cálculo de la distancia entre dos puntos.
- Cálculo de la distancia total.
- Mostrar la distancia total.

---

#### Obtención de coordenadas

- Responsabilidad de esta función
    - ¿Obtenemos **todas** las coordenadas?
    - ¿Obtenemos **un par** de coordenadas?
- Subproblemas
    - Validación de `lat`.
    - Validación de `lon`.

---

```python

import math

def lat_es_valida(lat):
    return -90 <= lat <= 90

def lon_es_valida(lon):
    return -180 <= lon <= 180

def get_lat(i):
    print(f"Coord {i} - Lat: ", end="")
    lat = float(input())
    while not lat_es_valida(lat):
        print("Latitud incorrecta. Intente de nuevo.")
        print(f"Coord {i} - Lat: ", end="")
        lat = float(input())
    return lat

def get_lon(i):
    print(f"Coord {i} - Lon: ", end="")
    lat = float(input())
    while not lon_es_valida(lat):
        print("Latitud incorrecta. Intente de nuevo.")
        print(f"Coord {i} - Lon: ", end="")
        lat = float(input())
    return lat

def distancia(lat1, lon1, lat2, lon2):
    # Pitagoras
    return math.sqrt((lat1 - lat2)**2 + (lon1 - lon2)**2)

def main():
    lat = get_lat(1)
    lon = get_lon(1)
    lat_anterior = lat
    lon_anterior = lon
    distancia_total = 0
    counter = 2
    while lat != 0 and lon != 0:
        lat = get_lat(counter)
        lon = get_lon(counter)
        distancia_total += distancia(lat, lon, lat_anterior, lon_anterior)
        lat_anterior = lat
        lon_anterior = lon
        counter += 1
    print(f"Distancia total: {distancia_total}")
# main()
```


---

## Ejercicio: Carrito de la Compra

Desarrolla un programa Python que gestione un carro de la compra.

- El programa mostrará un menú con las siguientes opciones:
    - **Añadir producto**: solicitará al usuario el nombre y el precio del producto a añadir al carro.
    - **Eliminar producto**: solicitará al usuario el nombre del producto a eliminar del carro.
    - **Mostrar carro**: mostrará el contenido del carro.
    - **Salir**: finalizará el programa.

---
