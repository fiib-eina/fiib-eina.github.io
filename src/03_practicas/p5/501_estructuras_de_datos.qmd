---
title: Práctica 5
subtitle: Objetos y listas
format: html
---

## Biblioteca de números complejos

En esta práctica vamos a realizar varios ejercicios que van a requerir trabajar con números complejos. 
Para ello, vamos a definir un módulo denominado `complejos.py` que contendrá una serie de funciones generales necesarias para resolver ambos problemas.

En el módulo `complejos.py` debes definir:

- Una clase (_dataclass_) denominada `Complejo`, que represente un número complejo con dos atributos: `real` e `imag`.
- Una función denominada `str_complejo()` que, dado un dato de tipo `Complejo` devuelva un string con la representación del número en forma binomial ($a+bi$) con 4 decimales máximos para cada componente.
- Una función denominada `sumar()` que, dados dos número complejos, devuelva otro que represente su suma.
- Una función denominada `restar()` que, dados dos número complejos, devuelva otro que represente su diferencia. 
- Una función denominada `modulo()` que, dado un número complejo, devuelva su módulo.
- Una función denominada `mayor_que()`, `menor_que()` e `igual_que()` que, dados dos números complejos, devuelvan `True` si se cumple que el módulo del primero sea mayor/menor/igual que el módulo del segundo.

<!-- NOTE: Queremos que controlen el número de decimales redondeando a 4. -->

Ejemplo de representación:

```python
print(str_complejo(Complejo(3, 4)))
```

| 3+4i

Ejemplo de representación:

```python
print(str_complejo(Complejo(3.22, 4.1111111111)))

```

| 3.22+4.1111i

Ejemplo de ejecución de la función `sumar()`:

```python
print(str_complejo(sumar(Complejo(3, 4), Complejo(1, 2))))
```

| 4+6i

Ejemplo de ejecución de la función `modulo()`:

```python
print(modulo(Complejo(3, 4)))
```

| 5.0

**Entrega:** Escribe tu programa en un fichero denominado `complejos.py`.

**Pruebas:** Si ejecutas el código del fichero [`test_complejos.py`](./tests/test_complejos.py), se harán pruebas de unidad de ese módulo.

## Calculadora de números complejos

Escribe un programa Python `calculadora.py` que implemente una **calculadora de números complejos** con las siguientes operaciones: suma y resta.
El programa debe:

- Pedir al usuario que introduzca dos números complejos.
- Pedir al usuario que introduzca la operación a realizar.
- Calcular el resultado de la operación.
- Mostrar el resultado con la representación binomial: ($a+bi$), donde $a$ es la parte real y $b$ es la parte imaginaria del número complejo.


<!-- NOTE: Quito esta parte específicamente para ver si se les ocurre reutilizar. Al ser i/o no le voy a hacer un unittest o sea que da igual -->
<!-- En el fichero `calculadora.py` debes importar el contenido del módulo `complejos.py` y -->
<!-- - Una función denominada `pedir_numero_complejo()` que solicite al usuario la parte real y la parte imaginaria de un número complejo y devuelva un dato de tipo `Complejo` -->
<!-- - Una función denominada `pedir_operacion()`, que pida al usuario una operación representada como `"+"` o `"-"` y escribir el código del programa solicitado.  -->

El comportamiento del programa debe ser como el siguiente:

| Escribe un número complejo:
| - Parte real: **8.3**
| - Parte imaginaria: **3**
| Escribe otro número complejo:
| - Parte real: **1**
| - Parte imaginaria: **2**
| Introduce la operación: **+**
| 9.3+5.0i

Otro ejemplo de ejecución (observa en este caso cómo se escribe la parte imaginaria del resultado):

| Escribe un número complejo:
| - Parte real: **3**
| - Parte imaginaria: **3**
| Escribe otro número complejo:
| - Parte real: **3**
| - Parte imaginaria: **5**
| Introduce la operación: **-**
| 0.0-2.0i

Un último ejemplo de ejecución:

| Escribe un número complejo:
| - Parte real: **3.14**
| - Parte imaginaria: **-4.4**
| Escribe otro número complejo:
| - Parte real: **16.3**
| - Parte imaginaria: **0.33**
| Introduce la operación: **\***
| Operación no válida

**Entrega:** Escribe tu programa en un fichero denominado `calculadora.py`.

## Listas de números complejos

Escribe un programa, en un fichero denominado `lista_complejos.py`, que genere una lista de $n$ números complejos, con sus partes real e imaginaria elegidas en un intervalo $(x, y)$ de manera aleatoria (recuerda el tema de [generación de números aleatorios](../../01_teoria/03_composicion/306_composicion_iterativa_avanzada.qmd#n%C3%BAmeros-pseudo-aleatorios-en-python).
El programa debe, en primer lugar, solicitar al usuario el número $n$ de números complejos con el que desea trabajar y, a continuación, pedir los límites del intervalo $(x, y)$ al usuario, garantizando que los valores introducidos cumplen que $x < y$.
Después, mostrará al usuario todos los números complejos generados.
Posteriormente, mostrará al usuario el número complejo de mayor módulo de la lista y la suma de todos los complejos generados.
El programa terminará escribiendo en la pantalla la lista de los números complejos generados que pertenecen al primer cuadrante (aquellos en los que la parte real y la parte imaginaria son estrictamente positivas).

Para escribir este programa, deberás apoyarte de nuevo en el contenido de tu módulo `complejos.py`.
En el fichero `lista_complejos.py`, define:

- Una función `generar_complejo_aleatorio()` que dados dos valores que representan un intervalo, genere un número complejo con partes real e imaginaria aleatorias, ambas dentro de ese intervalo. 
- Una función `generar_lista_complejos()` que, dada una longitud y dos valores que representan un intervalo, genere una lista de números complejos con las características indicadas.
- Una función `str_lista_complejos()` que dada una lista de complejos, devuelva un string con la representación de todos los números complejos de la lista.
- Una función `minimo_lista_complejos()` que dada una lista de complejos, devuelva el complejo de menor módulo. Si la lista está vacía, devolverá `None`.
- Una función `suma_lista_complejos()` que dada una lista de complejos, devuelva la suma de todos los complejos de la lista.
- Una función `filtrar_primer_cuadrante()` que dada una lista de complejos, devuelva una lista con los complejos que pertenecen al primer cuadrante.

Ejemplo de ejecución:

| Introduce el número de complejos a generar: **5**
| Introduce el límite inferior: **0**
| Introduce el límite superior: **10**
| 
| Lista de números complejos generada:
| 6.2752+2.1476i, 4.2194+0.592i, 7.341+4.6596i, 2.3868+8.4841i, 9.5767+1.3759i
| 
| Número complejo de menor módulo:
| 4.2194+0.592i
| 
| 
| Suma de los números complejos:
| 29.7991+17.2591i
| 
| 
| Números complejos del primer cuadrante:
| 6.2752+2.1476i, 4.2194+0.592i, 7.341+4.6596i, 2.3868+8.4841i, 9.5767+1.3759i

Ejemplo de ejecución:

| Introduce el número de complejos a generar: **6**
| Introduce el límite inferior: **-0.1**
| Introduce el límite superior: **0**    
| 
| Lista de números complejos generada:
| -0.0361-0.079i, -0.0133-0.02i, -0.0929-0.0308i, -0.0059-0.0334i, -0.0047-0.0187i, -0.0283-0.0315i
| 
| Número complejo de menor módulo:
| -0.0047-0.0187i
| 
| 
| Suma de los números complejos:
| -0.1812-0.2133i
| 
| 
| Números complejos del primer cuadrante:
| 
 

Ejemplo de ejecución:

| Introduce el número de complejos a generar: **-8**
| Introduce el número de complejos a generar: **0**
| Introduce el número de complejos a generar: **4**
| Introduce el límite inferior: **8**
| Introduce el límite superior: **1**
| Introduce el límite inferior: **-2**
| Introduce el límite superior: **2**
|
| Lista de números complejos generada:
| -0.9437+0.6562i, 0.5002+0.7605i, 0.9307+1.7915i, -1.7906-0.4771i
| 
| Número complejo de menor módulo:
| 0.5002+0.7605i
| 
| 
| Suma de los números complejos:
| -1.3033+2.7311i
| 
| 
| Números complejos del primer cuadrante:
| 0.5002+0.7605i, 0.9307+1.7915i

**Entrega:** Escribe tu programa en un fichero denominado `lista_complejos.py`.

**Pruebas:** Si ejecutas el código del fichero [`test_lista_complejos.py`](./tests/test_lista_complejos.py), se harán pruebas de unidad de ese módulo.

## Entrega de la práctica

**Antes del 26 de abril a las 18:00,** deberán haberse subido a Moodle los siguientes ficheros:

- [ ] `complejos.py`
- [ ] `calculadora.py`
- [ ] `lista_complejos.py`
