[
  {
    "objectID": "src/03_practicas/p0/00_Introductoria.html#objetivos",
    "href": "src/03_practicas/p0/00_Introductoria.html#objetivos",
    "title": "Práctica 0",
    "section": "Objetivos",
    "text": "Objetivos\n\nInstalar el entorno de trabajo\nFamiliarizarse con el entorno de trabajo\n\nEditor de texto\nTerminal\n\nAprender a ejecutar (no escribir) código Python\nIntuyendo Python\nEntregar"
  },
  {
    "objectID": "src/03_practicas/p0/00_Introductoria.html#instalación-del-entorno-de-trabajo",
    "href": "src/03_practicas/p0/00_Introductoria.html#instalación-del-entorno-de-trabajo",
    "title": "Práctica 0",
    "section": "Instalación del entorno de trabajo",
    "text": "Instalación del entorno de trabajo\nPara desarrollar en python necesitamos:\n\nIntérprete de Python: Python\nEntorno de desarrollo: Visual Studio Code"
  },
  {
    "objectID": "src/03_practicas/p0/00_Introductoria.html#familiarizarse-con-el-entorno-de-trabajo",
    "href": "src/03_practicas/p0/00_Introductoria.html#familiarizarse-con-el-entorno-de-trabajo",
    "title": "Práctica 0",
    "section": "Familiarizarse con el entorno de trabajo",
    "text": "Familiarizarse con el entorno de trabajo\nDurante el proceso de desarrollo, siempre tendremos en cuenta:\n\nSistema ficheros: Localización de los programas\nCódigo fuente: Contenido de los programas\nTerminal: Ejecución de programas python\n\nEstos tres elementos pueden ser controlados desde Visual Studio Code."
  },
  {
    "objectID": "src/03_practicas/p0/00_Introductoria.html#programa-interactivo",
    "href": "src/03_practicas/p0/00_Introductoria.html#programa-interactivo",
    "title": "Práctica 0",
    "section": "Programa interactivo",
    "text": "Programa interactivo\n\nMás adelante en el curso aprenderás a hacer programas que requieran de la interacción del usuario.\nDicha interacción se realiza también en la propia terminal.\nPara familiarizarte ahora con este comportamiento, vamos a escribir y ejecutar un programa interactivo."
  },
  {
    "objectID": "src/03_practicas/p0/00_Introductoria.html#intuyendo-python",
    "href": "src/03_practicas/p0/00_Introductoria.html#intuyendo-python",
    "title": "Práctica 0",
    "section": "Intuyendo Python",
    "text": "Intuyendo Python\nA continuación evaluaremos nuestra capacidad de intuir y entender el funcionamiento de código python.\nTarea: Documenta los siguientes programas en un docstring.\n\nDescarga o copia los ficheros en la carpeta p0.\nÁbrelos con el editor de texto y lee su contenido.\nEjecuta los programas desde la terminal de VSCode.\nAñade un docstring al principio de cada fichero incluyendo tu nombre y explicando qué hace el programa.\n\nNota: Puedes hacer Clic derecho &gt; Guardar enlace como... en los nombres de cada fichero para descargarlos o hacer clic en el icono del portapapeles para copiar todo el contenido."
  },
  {
    "objectID": "src/03_practicas/p0/00_Introductoria.html#entrega-de-la-práctica",
    "href": "src/03_practicas/p0/00_Introductoria.html#entrega-de-la-práctica",
    "title": "Práctica 0",
    "section": "Entrega de la práctica",
    "text": "Entrega de la práctica\nTodas las prácticas se entregarán a través de Moodle. Esta Práctica 0 no es evaluable, pero sí se deberá entregar para familiarizarse con el proceso.\nTarea: Entrega el código de la práctica.\n\nVerifica que has nombrado correctamente los ficheros. Un fichero mal nombrado no será evaluado.\nVerifica que has añadido un docstring a cada fichero con tu nombre y NIP.\nVerifica que el funcionamiento de los programas es correcto.\nAccede a la entrega en Moodle y lee si hay instrucciones extra.\nSube los ficheros *.py individualmente (sin comprimir y sin crear carpetas adicionales).\n\nNota: No se aceptarán entregas fuera de plazo. En el caso de que se acerque la fecha límite de entrega, se recomienda al menos subir los ejercicios que se hayan terminado. Se podrán resubir tantas veces como se desee antes de la fecha límite de entrega.\n\n\n\n\nFundamentos de Informática"
  },
  {
    "objectID": "src/01_teoria/02_tipos_de_datos_basicos/201_fundamentos_python.html#fundamentos-de-python",
    "href": "src/01_teoria/02_tipos_de_datos_basicos/201_fundamentos_python.html#fundamentos-de-python",
    "title": "Teoría 201",
    "section": "Fundamentos de Python",
    "text": "Fundamentos de Python"
  },
  {
    "objectID": "src/01_teoria/02_tipos_de_datos_basicos/201_fundamentos_python.html#variables",
    "href": "src/01_teoria/02_tipos_de_datos_basicos/201_fundamentos_python.html#variables",
    "title": "Teoría 201",
    "section": "Variables",
    "text": "Variables"
  },
  {
    "objectID": "src/01_teoria/02_tipos_de_datos_basicos/201_fundamentos_python.html#asignación",
    "href": "src/01_teoria/02_tipos_de_datos_basicos/201_fundamentos_python.html#asignación",
    "title": "Teoría 201",
    "section": "Asignación",
    "text": "Asignación"
  },
  {
    "objectID": "src/01_teoria/02_tipos_de_datos_basicos/201_fundamentos_python.html#modelo-de-ejecución-imperativa",
    "href": "src/01_teoria/02_tipos_de_datos_basicos/201_fundamentos_python.html#modelo-de-ejecución-imperativa",
    "title": "Teoría 201",
    "section": "Modelo de ejecución imperativa",
    "text": "Modelo de ejecución imperativa"
  },
  {
    "objectID": "src/01_teoria/02_tipos_de_datos_basicos/201_fundamentos_python.html#entradasalida",
    "href": "src/01_teoria/02_tipos_de_datos_basicos/201_fundamentos_python.html#entradasalida",
    "title": "Teoría 201",
    "section": "Entrada/Salida",
    "text": "Entrada/Salida"
  },
  {
    "objectID": "src/01_teoria/02_tipos_de_datos_basicos/201_fundamentos_python.html#ejercicios",
    "href": "src/01_teoria/02_tipos_de_datos_basicos/201_fundamentos_python.html#ejercicios",
    "title": "Teoría 201",
    "section": "Ejercicios",
    "text": "Ejercicios"
  },
  {
    "objectID": "src/01_teoria/01_conceptos_basicos/101_Introducción.html#que-es-la-informática",
    "href": "src/01_teoria/01_conceptos_basicos/101_Introducción.html#que-es-la-informática",
    "title": "Teoría 101",
    "section": "¿Que es la informática?",
    "text": "¿Que es la informática?\n\nProcesamiento de información automática\nInformación: Conjunto de datos numéricos, alfabéticos o alfanuméricos necesarios para plantear y resolver un problema\nTratamiento de la información:\n\nEntrada: Introducción de los datos del problema\nProcesamiento: Transformación de datos\nSalida: Presentación de resultados"
  },
  {
    "objectID": "src/01_teoria/01_conceptos_basicos/101_Introducción.html#historia-de-la-informática",
    "href": "src/01_teoria/01_conceptos_basicos/101_Introducción.html#historia-de-la-informática",
    "title": "Teoría 101",
    "section": "Historia de la Informática",
    "text": "Historia de la Informática"
  },
  {
    "objectID": "src/01_teoria/01_conceptos_basicos/101_Introducción.html#hardware",
    "href": "src/01_teoria/01_conceptos_basicos/101_Introducción.html#hardware",
    "title": "Teoría 101",
    "section": "Hardware",
    "text": "Hardware"
  },
  {
    "objectID": "src/01_teoria/01_conceptos_basicos/101_Introducción.html#software",
    "href": "src/01_teoria/01_conceptos_basicos/101_Introducción.html#software",
    "title": "Teoría 101",
    "section": "Software",
    "text": "Software"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fundamentos de informática",
    "section": "",
    "text": "01_teoria/00_presentacion/ Presentación de la Asignatura - Información general \n\n\n01_teoria/01_conceptos_basicos/ Teoría 101 - Computadores y Lenguajes \n\n\n01_teoria/01_conceptos_basicos/ Teoría 102 - Lenguajes \n\n\n01_teoria/02_tipos_de_datos_basicos/ Teoría 201 - Python \n\n\n03_practicas/p0/ Práctica 0 - Introducción \n\n\n03_practicas/p1/ Práctica 1 - Tipos Primitivos \n\n\n\nNo hay resultados"
  },
  {
    "objectID": "src/01_teoria/00_presentacion/000_Presentación.html#profesores",
    "href": "src/01_teoria/00_presentacion/000_Presentación.html#profesores",
    "title": "Presentación de la Asignatura",
    "section": "Profesores",
    "text": "Profesores\n\nSergio Martín Segura (segura@unizar.es)\n\nTeoría, problemas y prácticas\nDespacho: L2.09, Ada Byron\n\nMiguel Ángel Latre Abadía (latre@unizar.es)\n\nPrácticas\nDespacho: D2.22, Ada Byron\n\n\nTutorías: Consultar enlace en Moodle"
  },
  {
    "objectID": "src/01_teoria/00_presentacion/000_Presentación.html#organización",
    "href": "src/01_teoria/00_presentacion/000_Presentación.html#organización",
    "title": "Presentación de la Asignatura",
    "section": "Organización",
    "text": "Organización\n\nClases teóricas: 2 horas semanales\nClases de problemas: 1 hora semanal\nPrácticas de laboratorio: 2 horas cada dos semanas"
  },
  {
    "objectID": "src/01_teoria/00_presentacion/000_Presentación.html#evaluación-final",
    "href": "src/01_teoria/00_presentacion/000_Presentación.html#evaluación-final",
    "title": "Presentación de la Asignatura",
    "section": "Evaluación final",
    "text": "Evaluación final\n\nLa nota final, tal cual indica la guía docente, se calcula:\n\n\\(70\\%\\) Examen escrito (mínimo \\(5\\))\n\\(30\\%\\) Nota de prácticas (dos opciones):\n\nEntregas de prácticas\nExamen práctico final (anula la nota de entregas)\n\n\nSe deberá obtener una nota mínima de \\(5\\) ponderada para aprobar la asignatura\nSegunda convocatoria\n\nExamen escrito + Examen práctico final\nMismas ponderaciones"
  },
  {
    "objectID": "src/01_teoria/00_presentacion/000_Presentación.html#dudas",
    "href": "src/01_teoria/00_presentacion/000_Presentación.html#dudas",
    "title": "Presentación de la Asignatura",
    "section": "¿Dudas?",
    "text": "¿Dudas?\n\n\n\n\nFundamentos de Informática"
  },
  {
    "objectID": "src/01_teoria/01_conceptos_basicos/102_Lenguajes.html#algoritmo",
    "href": "src/01_teoria/01_conceptos_basicos/102_Lenguajes.html#algoritmo",
    "title": "Teoría 102",
    "section": "Algoritmo",
    "text": "Algoritmo"
  },
  {
    "objectID": "src/01_teoria/01_conceptos_basicos/102_Lenguajes.html#lenguajes-de-programación",
    "href": "src/01_teoria/01_conceptos_basicos/102_Lenguajes.html#lenguajes-de-programación",
    "title": "Teoría 102",
    "section": "Lenguajes de programación",
    "text": "Lenguajes de programación"
  },
  {
    "objectID": "src/01_teoria/01_conceptos_basicos/102_Lenguajes.html#lenguajes-de-alto-nivel-1",
    "href": "src/01_teoria/01_conceptos_basicos/102_Lenguajes.html#lenguajes-de-alto-nivel-1",
    "title": "Teoría 102",
    "section": "Lenguajes de alto nivel",
    "text": "Lenguajes de alto nivel"
  },
  {
    "objectID": "src/01_teoria/01_conceptos_basicos/102_Lenguajes.html#entorno-integrado-de-desarrollo",
    "href": "src/01_teoria/01_conceptos_basicos/102_Lenguajes.html#entorno-integrado-de-desarrollo",
    "title": "Teoría 102",
    "section": "Entorno Integrado de Desarrollo",
    "text": "Entorno Integrado de Desarrollo"
  },
  {
    "objectID": "src/03_practicas/p1/01_tipos_de_datos_primitivos.html",
    "href": "src/03_practicas/p1/01_tipos_de_datos_primitivos.html",
    "title": "Práctica 1",
    "section": "",
    "text": "Desarrolla un programa en Python que solicite al usuario un número real, que representará una longitud medida en centímetros, y escriba en la pantalla la medida equivalente en pulgadas.\nUna pulgada anglosajona actual equivale a 25,4 mm.\nUn ejemplo de ejecución:\nIntroduce un valor en centímetros:\n1\nEn pulgadas son:\n0.39370078740157477\nOtro ejemplo de ejecución:\nIntroduce un valor en centímetros:\n25.4\nEn pulgadas son:\n10.0\nY otro más:\nIntroduce un valor en centímetros:\n84.025\nEn pulgadas son:\n33.080708661417326\nEntrega: Escribe tu programa en un fichero denominado pulgadas.py.\n\n\n\nEscribe un programa en Python que solicite una temperatura expresada en grados Fahrenheit y escriba en la pantalla su equivalente en grados Celsius.\nLa fórmula que proporciona la equivalencia entre grados Celsius y Fahrenheit es\n\\[\nC=\\frac{5}{9}(F - 32)\n\\]\ndonde \\(C\\) es la temperatura en grados Celsius y \\(F\\) es la temperatura en grados Fahrenheit.\nUn ejemplo de ejecución:\nEscriba una temperatura expresada en grados Fahrenheit:\n32\nEn grados Celsius son:\n0.0\nY otro:\nEscriba una temperatura expresada en grados Fahrenheit:\n-459.67\nEn grados Celsius son:\n-273.15000000000003\nAunque probablemente no sea cierto, se dice que Daniel Gabriel Fahrenheit estableció el límite superior de su escala (100 °F) en la temperatura del cuerpo humano. Utiliza tu programa para comprobar que Fahrenheit tenía fiebre cuando calibró su escala.\nEntrega: Escribe tu programa en un fichero denominado fahrenheit.py.\n\n\n\nUna casa de cambio de moneda se ha especializado en dos divisas: euro y yen. Esta casa de cambio utiliza una tasa de conversión de euros a yenes fija durante todo un mes. Para este mes de febrero, ha establecido que va a cambiar un euro por 161,03241 yenes.\nEscribe un programa en Python que pida al usuario que escriba una cantidad no negativa de dinero expresada en euros y le informe de su equivalente en yenes:\nEscriba una cantidad no negativa de dinero en euros:\n43.65\nYenes:\n7029\nComo los yenes no tienen moneda fraccionaria (los senes dejaron de utilizarse en 1953), queremos que el número de yenes resultante se escriba sin decimales.\nUn segundo ejemplo se presenta a continuación para ilustrar el comportamiento deseado del programa:\nEscriba una cantidad no negativa de dinero en euros:\n43.69\nYenes:\n7036\nEntrega: Escribe tu programa en un fichero denominado yenes.py."
  },
  {
    "objectID": "src/03_practicas/p1/01_tipos_de_datos_primitivos.html#problemas-de-conversión",
    "href": "src/03_practicas/p1/01_tipos_de_datos_primitivos.html#problemas-de-conversión",
    "title": "Práctica 1",
    "section": "",
    "text": "Desarrolla un programa en Python que solicite al usuario un número real, que representará una longitud medida en centímetros, y escriba en la pantalla la medida equivalente en pulgadas.\nUna pulgada anglosajona actual equivale a 25,4 mm.\nUn ejemplo de ejecución:\nIntroduce un valor en centímetros:\n1\nEn pulgadas son:\n0.39370078740157477\nOtro ejemplo de ejecución:\nIntroduce un valor en centímetros:\n25.4\nEn pulgadas son:\n10.0\nY otro más:\nIntroduce un valor en centímetros:\n84.025\nEn pulgadas son:\n33.080708661417326\nEntrega: Escribe tu programa en un fichero denominado pulgadas.py.\n\n\n\nEscribe un programa en Python que solicite una temperatura expresada en grados Fahrenheit y escriba en la pantalla su equivalente en grados Celsius.\nLa fórmula que proporciona la equivalencia entre grados Celsius y Fahrenheit es\n\\[\nC=\\frac{5}{9}(F - 32)\n\\]\ndonde \\(C\\) es la temperatura en grados Celsius y \\(F\\) es la temperatura en grados Fahrenheit.\nUn ejemplo de ejecución:\nEscriba una temperatura expresada en grados Fahrenheit:\n32\nEn grados Celsius son:\n0.0\nY otro:\nEscriba una temperatura expresada en grados Fahrenheit:\n-459.67\nEn grados Celsius son:\n-273.15000000000003\nAunque probablemente no sea cierto, se dice que Daniel Gabriel Fahrenheit estableció el límite superior de su escala (100 °F) en la temperatura del cuerpo humano. Utiliza tu programa para comprobar que Fahrenheit tenía fiebre cuando calibró su escala.\nEntrega: Escribe tu programa en un fichero denominado fahrenheit.py.\n\n\n\nUna casa de cambio de moneda se ha especializado en dos divisas: euro y yen. Esta casa de cambio utiliza una tasa de conversión de euros a yenes fija durante todo un mes. Para este mes de febrero, ha establecido que va a cambiar un euro por 161,03241 yenes.\nEscribe un programa en Python que pida al usuario que escriba una cantidad no negativa de dinero expresada en euros y le informe de su equivalente en yenes:\nEscriba una cantidad no negativa de dinero en euros:\n43.65\nYenes:\n7029\nComo los yenes no tienen moneda fraccionaria (los senes dejaron de utilizarse en 1953), queremos que el número de yenes resultante se escriba sin decimales.\nUn segundo ejemplo se presenta a continuación para ilustrar el comportamiento deseado del programa:\nEscriba una cantidad no negativa de dinero en euros:\n43.69\nYenes:\n7036\nEntrega: Escribe tu programa en un fichero denominado yenes.py."
  },
  {
    "objectID": "src/03_practicas/p1/01_tipos_de_datos_primitivos.html#rectángulo",
    "href": "src/03_practicas/p1/01_tipos_de_datos_primitivos.html#rectángulo",
    "title": "Práctica 1",
    "section": "2 Rectángulo",
    "text": "2 Rectángulo\nImplementa un programa que:\n\nSolicite al usuario las coordenadas de dos esquinas opuestas de un rectángulo.\n\nx1, y1, x2, y2\n\nUsando esas coordenadas, calcule:\n\nEl área del rectángulo\nEl perímetro del rectángulo\n\n\n\nUn ejemplo de ejecución del programa solicitado:\nIntroduzca x1:\n2\nIntroduzca y1:\n3\nIntroduzca x2:\n5\nIntroduzca y2:\n6\n\nEl área del rectángulo es:\n9.0\n\nEl perímetro del rectángulo es:\n12.0\nY otro:\nIntroduzca x1:\n1.5\nIntroduzca y1:\n7.4\nIntroduzca x2:\n6.8\nIntroduzca y2:\n2.3\n\nEl área del rectángulo es:\n27.03\n\nEl perímetro del rectángulo es:\n20.8\nEntrega: Escribe tu programa en un fichero denominado rectangulo.py."
  },
  {
    "objectID": "src/03_practicas/p1/01_tipos_de_datos_primitivos.html#habitación-de-hotel",
    "href": "src/03_practicas/p1/01_tipos_de_datos_primitivos.html#habitación-de-hotel",
    "title": "Práctica 1",
    "section": "3 Habitación de hotel",
    "text": "3 Habitación de hotel\nEscribe un programa en Python que interaccione con el usuario mostrando el siguiente comportamiento:\nEscriba un número de habitación:\n514\n\nPlanta:\n5\nNúmero:\n14\nEl número de habitación escrito por el usuario sigue el convenio habitual de numeración de habitaciones en hoteles: el número de centenas indican la planta en la que está la habitación y las decenas y unidades indican el número de habitación dentro de la planta. Por el momento, vamos a suponer que el usuario siempre va a escribir números positivos que representan números de habitación válidas con formato establecido.\nUn segundo ejemplo se presenta a continuación para ilustrar el comportamiento deseado del programa.\nEscriba un número de habitación:\n1803\n\nPlanta:\n18\nNúmero:\n3\nEntrega: Escribe tu programa en un fichero denominado hotel.py."
  },
  {
    "objectID": "src/03_practicas/p1/01_tipos_de_datos_primitivos.html#condiciones-booleanas",
    "href": "src/03_practicas/p1/01_tipos_de_datos_primitivos.html#condiciones-booleanas",
    "title": "Práctica 1",
    "section": "4 Condiciones booleanas",
    "text": "4 Condiciones booleanas\nEscribe un programa en Python que pida al usuario tres números enteros y diga si se cumple que los tres números son pares, positivos y además el segundo número está comprendido estrictamente entre el primero y el tercero:\nEscribe un primer número:\n2\nEscribe un segundo número:\n4\nEscribe un tercer número:\n8\nCumplen todas las condiciones:\nTrue\nOtro ejemplo de ejecución:\nEscribe un primer número:\n3\nEscribe un segundo número:\n-2\nEscribe un tercer número:\n-5\nCumplen todas las condiciones:\nFalse\nEntrega: Escribe tu programa en un fichero denominado entre_pares.py."
  }
]